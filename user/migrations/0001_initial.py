# Generated by Django 5.1.6 on 2025-03-09 22:26

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import django_jalali.db.models
import phonenumber_field.modelfields
import user.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Pelak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=8, validators=[user.models.pelak_validator])),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('expiration_date', django_jalali.db.models.jDateTimeField(blank=True, help_text='Jalali datetime field for remain time of user', null=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('active_code', models.CharField(blank=True, default='', max_length=255)),
                ('username', models.CharField(error_messages={'unique': 'A user with that national code already exists.'}, help_text='National code must be exactly 10 digits.', max_length=150, unique=True, validators=[user.models.validate_national_code])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Center',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('address', models.TextField()),
                ('code', models.CharField(blank=True, max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('services', models.ManyToManyField(to='user.servicetype')),
            ],
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='towns', to='user.state', verbose_name='state')),
            ],
            options={
                'verbose_name': 'Town',
                'verbose_name_plural': 'Towns',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(error_messages={'unique': 'A user with that national code already exists.'}, help_text='National code must be exactly 10 digits.', max_length=150, unique=True, validators=[user.models.validate_national_code])),
                ('password', models.CharField(max_length=150)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('vehicle_cat', models.CharField(max_length=150)),
                ('cd_peigiri', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(default='stop', max_length=30)),
                ('result_image', models.ImageField(blank=True, upload_to='result_images/')),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('service_center', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', related_query_name='customer', to='user.center')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', related_query_name='customer', to=settings.AUTH_USER_MODEL)),
                ('pelak', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', related_query_name='customer', to='user.pelak')),
                ('service_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', related_query_name='customer', to='user.servicetype')),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', related_query_name='customer', to='user.state')),
                ('town', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', related_query_name='customer', to='user.town')),
            ],
        ),
        migrations.AddField(
            model_name='center',
            name='towns',
            field=models.ManyToManyField(to='user.town'),
        ),
    ]
